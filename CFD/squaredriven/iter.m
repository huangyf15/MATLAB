function [u,v,w,pf] = iter(u,v,w,pf)
include_flags;

%% Step 1: time-propelling: calculation of w(omega)
% deal with boundary points
    w(2:Nx,1)    = 1/dy/dy*(-3.5*pf(2:Nx,3) + 4*pf(2:Nx,2) - 0.5*pf(2:Nx,1));
    w(2:Nx,Nx+1) = 1/dy/dy*(-3.5*pf(2:Nx,Nx-1) + 4*pf(2:Nx,Nx) - 0.5*pf(2:Nx,Nx+1) + 3*dy);
    w(1,2:Nx)    = -1/dx/dx*(-3.5*pf(3,2:Nx) + 4*pf(2,2:Nx) - 0.5*pf(1,2:Nx));
    w(Nx+1,2:Nx) = -1/dx/dx*(-3.5*pf(Nx-1,2:Nx) + 4*pf(Nx,2:Nx) - 0.5*pf(Nx+1,2:Nx));
    w(1,1)       = (w(1,2) + w(2,1))/2;
    w(1,Nx+1)    = (w(1,Nx) + w(2,Nx+1))/2;
    w(Nx+1,Nx+1) = (w(Nx,Nx+1) + w(Nx+1,Nx))/2;
    w(Nx+1,1)    = (w(Nx,1) + w(Nx+1,2))/2;
% deal with internal points
    w0 = w;
if ind == 1         % 1-order upwind scheme
    c_u_pos = 0.5*(u + abs(u))*dt/dx;
    c_u_neg = 0.5*(u - abs(u))*dt/dx;
    c_v_pos = 0.5*(v + abs(v))*dt/dy;
    c_v_neg = 0.5*(v - abs(v))*dt/dy;
    w(2:Nx,2:Nx) = w0(2:Nx,2:Nx) ...
        - c_u_pos(2:Nx,2:Nx) .* (w0(2:Nx,2:Nx) - w0(1:Nx-1,2:Nx)) ...
        - c_u_neg(2:Nx,2:Nx) .* (w0(3:Nx+1,2:Nx) - w0(2:Nx,2:Nx)) ...
        - c_v_pos(2:Nx,2:Nx) .* (w0(2:Nx,2:Nx) - w0(2:Nx,1:Nx-1)) ...
        - c_v_neg(2:Nx,2:Nx) .* (w0(2:Nx,3:Nx+1) - w0(2:Nx,2:Nx)) ...
        + 1/Re * dt/dx/dx * (w0(3:Nx+1,2:Nx) - 2*w0(2:Nx,2:Nx) + w0(1:Nx-1,2:Nx)) ...
        + 1/Re * dt/dy/dy * (w0(2:Nx,3:Nx+1) - 2*w0(2:Nx,2:Nx) + w0(2:Nx,1:Nx-1));
elseif ind == 2     % 2-order upwind scheme
    c_u_pos = 0.5*(u + abs(u))*dt/dx;
    c_u_neg = 0.5*(u - abs(u))*dt/dx;
    c_v_pos = 0.5*(v + abs(v))*dt/dy;
    c_v_neg = 0.5*(v - abs(v))*dt/dy;
    % deal with points near the boundary
    i = 2;
    for j = 2:Nx
        w(i,j) = w0(i,j) ...
            - c_u_pos(i,j) * (w0(i,j) - w0(i-1,j)) ...
            - c_u_neg(i,j) * (w0(i+1,j) - w0(i,j)) ...
            - c_v_pos(i,j) * (w0(i,j) - w0(i,j-1)) ...
            - c_v_neg(i,j) * (w0(i,j+1) - w0(i,j)) ...
            + 1/Re * dt/dx/dx * (w0(i+1,j) - 2*w0(i,j) + w0(i-1,j)) ...
            + 1/Re * dt/dy/dy * (w0(i,j+1) - 2*w0(i,j) + w0(i,j-1));
    end
    i = Nx;
    for j = 2:Nx
        w(i,j) = w0(i,j) ...
            - c_u_pos(i,j) * (w0(i,j) - w0(i-1,j)) ...
            - c_u_neg(i,j) * (w0(i+1,j) - w0(i,j)) ...
            - c_v_pos(i,j) * (w0(i,j) - w0(i,j-1)) ...
            - c_v_neg(i,j) * (w0(i,j+1) - w0(i,j)) ...
            + 1/Re * dt/dx/dx * (w0(i+1,j) - 2*w0(i,j) + w0(i-1,j)) ...
            + 1/Re * dt/dy/dy * (w0(i,j+1) - 2*w0(i,j) + w0(i,j-1));
    end
    j = 2;
    for i = 3:Nx-1
        w(i,j) = w0(i,j) ...
            - c_u_pos(i,j) * (w0(i,j) - w0(i-1,j)) ...
            - c_u_neg(i,j) * (w0(i+1,j) - w0(i,j)) ...
            - c_v_pos(i,j) * (w0(i,j) - w0(i,j-1)) ...
            - c_v_neg(i,j) * (w0(i,j+1) - w0(i,j)) ...
            + 1/Re * dt/dx/dx * (w0(i+1,j) - 2*w0(i,j) + w0(i-1,j)) ...
            + 1/Re * dt/dy/dy * (w0(i,j+1) - 2*w0(i,j) + w0(i,j-1));
    end
    j = Nx;
    for i = 3:Nx-1
        w(i,j) = w0(i,j) ...
            - c_u_pos(i,j) * (w0(i,j) - w0(i-1,j)) ...
            - c_u_neg(i,j) * (w0(i+1,j) - w0(i,j)) ...
            - c_v_pos(i,j) * (w0(i,j) - w0(i,j-1)) ...
            - c_v_neg(i,j) * (w0(i,j+1) - w0(i,j)) ...
            + 1/Re * dt/dx/dx * (w0(i+1,j) - 2*w0(i,j) + w0(i-1,j)) ...
            + 1/Re * dt/dy/dy * (w0(i,j+1) - 2*w0(i,j) + w0(i,j-1));
    end
    % deal with the real internal points
    for i = 3:Nx-1
        for j = 3:Nx-1
            w(i,j) = w0(i,j) ...
                - c_u_pos(i,j) * (1.5*w0(i,j) - 2*w0(i-1,j) + 0.5*w0(i-2,j)) ...
                - c_u_neg(i,j) * (-0.5*w0(i+2,j) + 2*w0(i+1,j) -1.5*w0(i,j)) ...
                - c_v_pos(i,j) * (1.5*w0(i,j) - 2*w0(i,j-1) + 0.5*w0(i,j-2)) ...
                - c_v_neg(i,j) * (-0.5*w0(i,j+2) + 2*w0(i,j+1) -1.5*w0(i,j)) ...
                + 1/Re * dt/dx/dx * (w0(i+1,j) - 2*w0(i,j) + w0(i-1,j)) ...
                + 1/Re * dt/dy/dy * (w0(i,j+1) - 2*w0(i,j) + w0(i,j-1));
        end
    end
elseif ind == 3     % FTCS scheme
    w(2:Nx,2:Nx) = w0(2:Nx,2:Nx) ...
                - u(2:Nx,2:Nx) .* (w0(3:Nx+1,2:Nx) - w0(1:Nx-1,2:Nx)) * dt/2/dx ...
                - v(2:Nx,2:Nx) .* (w0(2:Nx,3:Nx+1) - w0(2:Nx,1:Nx-1)) * dt/2/dy ...
                + 1/Re * dt/dx/dx * (w0(3:Nx+1,2:Nx) - 2*w0(2:Nx,2:Nx) + w0(1:Nx-1,2:Nx)) ...
                + 1/Re * dt/dy/dy * (w0(2:Nx,3:Nx+1) - 2*w0(2:Nx,2:Nx) + w0(2:Nx,1:Nx-1));
end

%% Step 2: inner-iteration: calculation of psi
% iteration scheme: Gauss-Seidel
    err_pfConv = 1;
    coffx = 1/dx/dx;
    coffy = 1/dy/dy;
    coff = 1/(2*(1/dx/dx + 1/dy/dy));
    while (err_pfConv > err_pfConv_sup)
        pf0 = pf;
        pf(2:Nx,2:Nx) = ((pf(3:Nx+1,2:Nx) + pf(1:Nx-1,2:Nx))*coffx ...
                    + (pf(2:Nx,3:Nx+1) + pf(2:Nx,1:Nx-1))*coffy ...
                    - w(2:Nx,2:Nx)) * coff;
        err_pfConv = sqrt(sum(sum((pf(:,:) - pf0(:,:)).^2)));
    end

%% Step 3: renew the flow field (u,v)
if ind == 1 || ind == 3
    u(2:Nx,2:Nx) = (pf(2:Nx,3:Nx+1) - pf(2:Nx,1:Nx-1))/2/dy;
    v(2:Nx,2:Nx) = (pf(1:Nx-1,2:Nx) - pf(3:Nx+1,2:Nx))/2/dx;
elseif ind == 2
    u(2:Nx,2) = (-2*pf(2:Nx,1) - 3*pf(2:Nx,2) + 6*pf(2:Nx,3) - pf(2:Nx,4))/6/dy;
    u(2:Nx,3:Nx) = (pf(2:Nx,1:Nx-2) - 6*pf(2:Nx,2:Nx-1) + 3*pf(2:Nx,3:Nx) + 2*pf(2:Nx,4:Nx+1))/6/dy;
    v(2,2:Nx) = -(-2*pf(1,2:Nx) - 3*pf(2,2:Nx) + 6*pf(3,2:Nx) - pf(4,2:Nx))/6/dx;
    v(3:Nx,2:Nx) = -(pf(1:Nx-2,2:Nx) - 6*pf(2:Nx-1,2:Nx) + 3*pf(3:Nx,2:Nx) + 2*pf(4:Nx+1,2:Nx))/6/dx;
end

end